DBD Questions
The following list of questions can help you read up on what we have covered in DBD.

### General

# What is ACID?
    https://parathan.com/acid-properties-in-rdbms/
    https://neo4j.com/blog/acid-vs-base-consistency-models-explained/
    Used in RDBMS
    Atomicity:
        A transaction either happens or it doesn't. There is no middle state. Abort or commit.
    Consistency:
        Integrity constraints must be maintained before or after a transaction with the database. Keys, Unique, non null, etc
    Isolation:
        All transactions happening in the database are independant of others. It's public once the transaction has been completed. Transactions do not contend with one another
    Durability:
        The results of applying a transaction are permanent, even in the presence of failures.
    
# Whas is BASE?
    https://neo4j.com/blog/acid-vs-base-consistency-models-explained/
    Used in NoSQL
    It's "looser".
    Basic Availability: 
        The database appears to work most of the time. 
    Soft-state:
        Stores don't have to be write-consistent, nor do different replicas have to be mutually consistent all the time.
    Eventual consistency: 
        Stores exhibit consitency at some later point(e.g lazily at read time).

# What is the CAP theorem?
    https://www.ibm.com/cloud/learn/cap-theorem
    Three options in NoSQL databases. Can only choose two.
    Consistency:
        All clients see the same data at the same time, no matter which node tehey connect to.
        All data written to one node, must be instantly forwarded or replicated to all other nodes.
    Availability:
        Client will recieve a response regardless of success or failure.
    Partition tolerance: 
        A partition or node must continue to work despite any number of communcation breakdowns between nodes in the system.
    
    This defines 3 traits of NoSQl databases:
        CP databases.
            Mongo
        AP databases
            Cassandra
        CA databases.

# What is scaling?
    In the context of databases, it refers to increasing the size and capabilities of the database. Often also refers to the ease of achieving it.


### Relational databases


# What is a relational database?
    An RDBMS is a database which is able to work with relations. Uses SQL with very few exceptions (https://reldb.org/c/)
    Includes but isn't limited to: Oracle DBMS, Microsoft SQLserver, MySQL, PostgreSQL, SQLite, MariaDB. 

# What is the difference between the conceptual, logical, and physical models of a relational database?
    https://www.vertabelo.com/blog/conceptual-logical-physical-data-model/
    Different levels of complexity on insight of a database structure.
    Conceptual:
        High-level view of business requirements
    Logical:
        Entities involved are expanded and include more detail
    Physical:
        Actually implementable in RDBMS databases. Some software is able to convert the model into SQL and can execute the code for you.


# Why is it called 'relational'? What is a 'relation'? What is a 'relationship'? Which are the features of a relationship?
    Tables are created with primary keys and foreign keys. You can interact with these keys in different ways, to interact with other tables.
    E.g. person has a foreign key called "location_id". This is a reference to the table called "location"'s primary key "id".
    There are multiple typs of relations:
        one-to-one
        many-to-one
        one-to-many
        many-to-many

    There are also bi-directional and mono-directional relationships.

# Which is the underlying theory of the relational databases? Which operations defined by this theory do you know? How can you implement these operations in SQL?
    I don't care.

# What is known as database normalization? How many normal forms are you familiar with? When is de-normalisation useful?
    https://www.lifewire.com/database-normalization-basics-1019735
    https://en.wikipedia.org/wiki/First_normal_form
    https://www.lifewire.com/candidate-key-definition-1019246
    https://www.geeksforgeeks.org/denormalization-in-databases/

    A rabbit-hole of rules and restrictions you can follow. Usually the first three are the most enforced.
    1. 
        Atomic columns(cells have a single value). 
        Create separate tables for each group of related data and identify each row with a unique column of set of columns.
    2. 
        Comply with 1.
        Remove subsets of data that apply to multiple rows of a table and place them in separate tables. 
        Create relationships between the new tables and their predecessors through the use of foreign keys.
    3.
        Comply with 2.
        Remove columns that are not dependant up the primary key.
            A candidate key is a combination of attributes that uniquely identify a database reord without referring to any other data.
            Each table may have one or more candidate keys.
            One of the keys is a primary key.
            Only one primary key can exist.
            If a candidate key is composed of two or more columns, then it's called a composite key.
    3.5
        Comply with 3.
        Every determinant must be a candidate key.
    4.
        Comply with 3
        No multi-valued dependencies.
    
    And many more...

    Denormalization:
        Database optimization technique in which we add redundant data to one or more tables.

        Pros:
            Faster because fewer joins
            Simpler queries
        Cons:
            Updates and inserts are more expensive
            Update and insert code can be harder to write
            Data inconsistency
            Data redundancy = more storage required
        

# How can you implement inheritance in a relational database?
    postgres:

        CREATE TABLE cities (
        name            text,
        population      float,
        elevation       int     -- in feet
    );

    CREATE TABLE capitals (
        state           char(2)
    ) INHERITS (cities);

What is a primary key? What is a candidate key? What is a foreign key? What are the roles of those keys?
    https://www.guru99.com/dbms-keys.html
    There are many keys:
        Super key:
            A superkey is a group of single or multiple keys which identifies rows in a table. A Super key may have additional attributes that are not needed for unique identification.

        Primary key:
            PRIMARY KEY is a column or group of columns in a table that uniquely identify every row in that table. 
            The Primary Key can't be a duplicate meaning the same value can't appear more than once in the table. A table cannot have more than one primary key.

        Alternate key:
            ALTERNATE KEYS is a column or group of columns in a table that uniquely identify every row in that table. 
            A table can have multiple choices for a primary key but only one can be set as the primary key. All the keys which are not primary key are called an Alternate Key.

        Candidate key:
            CANDIDATE KEY is a set of attributes that uniquely identify tuples in a table. Candidate Key is a super key with no repeated attributes.
            The Primary key should be selected from the candidate keys. Every table must have at least a single candidate key. 
            A table can have multiple candidate keys but only a single primary key.

        Foreign key:
            FOREIGN KEY is a column that creates a relationship between two tables. 
            The purpose of Foreign keys is to maintain data integrity and allow navigation between two different instances of an entity. 
            It acts as a cross-reference between two tables as it references the primary key of another table.

        Compound key:
            COMPOUND KEY has two or more attributes that allow you to uniquely recognize a specific record. 
            It is possible that each column may not be unique by itself within the database. 
            However, when combined with the other column or columns the combination of composite keys become unique. 
            The purpose of the compound key in database is to uniquely identify each record in the table.

        Composite key:
            COMPOSITE KEY is a combination of two or more columns that uniquely identify rows in a table. 
            The combination of columns guarantees uniqueness, though individually uniqueness is not guaranteed. 
            Hence, they are combined to uniquely identify records in a table.

            The difference between compound and the composite key is that any part of the compound key can be a foreign key, but the composite key may or maybe not a part of the foreign key.


        Surrogate key:
            SURROGATE KEYS is An artificial key which aims to uniquely identify each record is called a surrogate key. 
            This kind of partial key in dbms is unique because it is created when you don't have any natural primary key. 
            They do not lend any meaning to the data in the table. Surrogate key is usually an integer. 
            A surrogate key is a value generated right before the record is inserted into a table.


What can be a primary key? 
    Usually an integer called "ID".
    Email assuming it's completely unique
    IP address
    Social security number


What is a transaction? What is transaction management? Why is transaction management important?
    https://www.geeksforgeeks.org/transaction-management/
    The concept of a transaction can be explained with ACID.
    Transaction management is built into the RDBMS.
    Pros:
        The DBMS is used to schedule the access of data concurrently. It means that the user can access multiple data from the database without being interfered with each other. Transactions are used to manage concurrency.
        
        It is also used to satisfy ACID properties.
        
        It is used to solve Read/Write Conflict.
        
        It is used to implement Recoverability, Serializability, and Cascading.
        
        Transaction Management is also used for Concurrency Control Protocols and Locking of data.

    Cons:
        It may be difficult to change the information within the transaction database by end-users.

        We need to always roll back and start from the beginning rather than continue from the previous state. 



What is a transaction isolation level? How many isolation levels are known? What is the use of them? Which is the default isolation level of PostgreSQL?
    



What is a lock of resources? Which resources can be locked? What is the use of locking?


What is a deadlock?


What four criteria must be fulfilled for a deadlock to arise?


What is deadlock prevention?


What is a view? What are the advantages of using view? What are the disadvantages?


What is a stored procedure? What is the difference between a stored procedure and user-defined function? When would you use SQL programming objects?


What is a trigger? How many types of triggers do you know?  What is the benefit of using triggers?


What is Object-Relational Mapping?


How do we assess the performance of a database? How can we improve the performance?



Column databases
What is an example of a column database?


What is the computational model used for working with hbase?


What is Map and Reduce?


What is a Bloom Filter? Explain how it works?


What is Huffmann-coding?


What is Big Table?


When would it be good to use HBase?


What is HDFS?


How is data stored in HBase, physically and logically?


How are rowkeys stored?


How does distribution of data in a cluster happen?


How does versioning happen in HBase?



Object databases / data model abstractions

What is the advantages of an object database?
    EDMA sucks


What is a meta model?
    EDMA is trash


What does it mean that data can be immutable? What is the advantages of working with immutable data?
    EDMA is garbage


EDMA has a fine grained type system (ValueDomains). What are the advantages and disadvantages?
    There are no advantages
    The primary disadvantage is, that it's a complete waste of time to learn.



Graph databases
Which logical data model is Neo4j built on? How does it differ from the relational model? Which types of operations with data does it support?


Which is the underlying physical/storage model of Neo4j database? Which advantages does this model provide?


How does Neo4j respond to ACID and CAP? How do database clusters relate to ACID and CAP features? 


How does Neo4j support transactions and indexing? 


Which are the components of the Neo4j development platform? Which connectivity methods are available? 


Which cluster architecture is available for Neo4j?


How do read and write operations differ when executed in a cluster?


Which are the main libraries, extending the core functionality of Neo4j? Give examples of popular library functions.


Which query language is used for processing the graph data? Which are the objects It operates with?


Which categories of graph algorithms are enabled in Neo4j? What is their implementation? Give some examples of algorithms in each category. 


Give some examples of business cases, which benefit from the implementation of graph algorithms.


What are the strengths and weaknesses of Neo4j? When is Neo4j the best choice of database type and when should it be avoided? Name some typical use cases and applications.



### Key-Value stores ### 

Mention a well known key-value store.
    Redis, Memcached

Why is Redis fast?
    Because it's an in-memory database

Which data types does Redis contain?
    According to redis.io
    Strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs, geospatial indexes, and streams.

    Like all other NoSQL databases, data in Redis is stored in associative arrays (Maps, Dictionaries, JSON). 
    External modules like https://oss.redislabs.com/redisjson/ allows for JSON like queries, as well as everything else JSON related.

How can you interact with Redis?
    Through a terminal with the Redis CLI or use a connector with your programming language. 

How can you make transactions in Redis?
    Through a terminal with the Redis CLI or use a connector with your programming language.

What possibilities are there for persistence in Redis?
    According to redis.io:

    RDB (Redis Database): The RDB persistence performs point-in-time snapshots of your dataset at specified intervals.
    AOF (Append Only File): The AOF persistence logs every write operation received by the server, that will be played again at server startup, reconstructing the original dataset. Commands are logged using the same format as the Redis protocol itself, in an append-only fashion. Redis is able to rewrite the log in the background when it gets too big.
    No persistence: If you wish, you can disable persistence completely, if you want your data to just exist as long as the server is running.
    RDB + AOF: It is possible to combine both AOF and RDB in the same instance. Notice that, in this case, when Redis restarts the AOF file will be used to reconstruct the original dataset since it is guaranteed to be the most complete.


How can you isolate key sets in different databases?
    Define ranges of slots for each cluster.
    Append port or other ways of identification to the key in question which is unique to the cluster.

How can you implement messaging with Redis?
    According to https://redislabs.com/solutions/use-cases/messaging/
    Redis Streams doubles as a communication channel for building streaming architectures and as a log-like data structure for persisting data, making Streams the perfect solution for event sourcing.

    Redis Pub/Sub is an extremely lightweight messaging protocol designed for broadcasting live notifications within a system. It’s ideal for propagating short-lived messages when low latency and huge throughput are critical.

    Redis Lists and Redis Sorted Sets are the basis for implementing message queues. They can be used both directly to build bespoke solutions, or via a framework that makes message processing more idiomatic for your programming language of choice.

What is optimistic locking?
    https://redis.io/topics/transactions
    A way of guaranteeing that:
        requests by another client is served in the middle of the execution of a Redis transaction.
        Either all of the commands or none are processed, so a Redis transaction is also atomic
    Redis failing to make transaction due to WATCH / EXEC race conditions -> Redis repeats operation (Optimistic locking)

How does Redis implement optimistic locking?
    Redis failing to make transaction due to WATCH / EXEC race conditions -> Redis repeats operation (Optimistic locking)

How can you increase availability with Redis?
    https://docs.redislabs.com/latest/rs/concepts/high-availability/
        Clustering 
        Replication
        Rack-zone awareness in enterprise
    https://redislabs.com/redis-enterprise/technology/highly-available-redis/
        Auto failover

What is sharding?
    https://redisson.org/glossary/sharding.html
    General term for splitting a database into multiple components or tables.
    Helps with scalability and availability

